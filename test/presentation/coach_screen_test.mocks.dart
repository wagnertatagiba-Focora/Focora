// Mocks generated by Mockito 5.4.4 from annotations
// in focora/test/presentation/coach_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:focora/domain/entities/thought_entity.dart' as _i3;
import 'package:focora/presentation/providers/thought_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ThoughtProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThoughtProvider extends _i1.Mock implements _i2.ThoughtProvider {
  MockThoughtProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ThoughtEntity> get thoughts => (super.noSuchMethod(
        Invocation.getter(#thoughts),
        returnValue: <_i3.ThoughtEntity>[],
      ) as List<_i3.ThoughtEntity>);

  @override
  List<_i3.ThoughtEntity> get recentThoughts => (super.noSuchMethod(
        Invocation.getter(#recentThoughts),
        returnValue: <_i3.ThoughtEntity>[],
      ) as List<_i3.ThoughtEntity>);

  @override
  List<MapEntry<_i3.CognitiveDistortion, int>> get commonDistortions =>
      (super.noSuchMethod(
        Invocation.getter(#commonDistortions),
        returnValue: <MapEntry<_i3.CognitiveDistortion, int>>[],
      ) as List<MapEntry<_i3.CognitiveDistortion, int>>);

  @override
  List<MapEntry<String, int>> get commonEmotions => (super.noSuchMethod(
        Invocation.getter(#commonEmotions),
        returnValue: <MapEntry<String, int>>[],
      ) as List<MapEntry<String, int>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadThoughts() => (super.noSuchMethod(
        Invocation.method(
          #loadThoughts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setCurrentThought(_i3.ThoughtEntity? thought) => super.noSuchMethod(
        Invocation.method(
          #setCurrentThought,
          [thought],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createNewThought(String? content) => super.noSuchMethod(
        Invocation.method(
          #createNewThought,
          [content],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> addThought(_i3.ThoughtEntity? thought) =>
      (super.noSuchMethod(
        Invocation.method(
          #addThought,
          [thought],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateThought(_i3.ThoughtEntity? thought) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateThought,
          [thought],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteThought(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteThought,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addDistortionToCurrent(_i3.CognitiveDistortion? distortion) =>
      super.noSuchMethod(
        Invocation.method(
          #addDistortionToCurrent,
          [distortion],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeDistortionFromCurrent(_i3.CognitiveDistortion? distortion) =>
      super.noSuchMethod(
        Invocation.method(
          #removeDistortionFromCurrent,
          [distortion],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addEmotionToCurrent(String? emotion) => super.noSuchMethod(
        Invocation.method(
          #addEmotionToCurrent,
          [emotion],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeEmotionFromCurrent(String? emotion) => super.noSuchMethod(
        Invocation.method(
          #removeEmotionFromCurrent,
          [emotion],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentEmotionIntensity(int? intensity) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentEmotionIntensity,
          [intensity],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentSituation(String? situation) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentSituation,
          [situation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentAlternativeThought(String? alternativeThought) =>
      super.noSuchMethod(
        Invocation.method(
          #updateCurrentAlternativeThought,
          [alternativeThought],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentOutcome(String? outcome) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentOutcome,
          [outcome],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> saveCurrentThought() => (super.noSuchMethod(
        Invocation.method(
          #saveCurrentThought,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void discardCurrentThought() => super.noSuchMethod(
        Invocation.method(
          #discardCurrentThought,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
