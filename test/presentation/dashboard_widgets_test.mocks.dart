// Mocks generated by Mockito 5.4.4 from annotations
// in focora/test/presentation/dashboard_widgets_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:focora/domain/entities/energy_log_entity.dart' as _i7;
import 'package:focora/domain/entities/task_entity.dart' as _i3;
import 'package:focora/presentation/providers/energy_provider.dart' as _i6;
import 'package:focora/presentation/providers/task_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskProvider extends _i1.Mock implements _i2.TaskProvider {
  MockTaskProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.TaskEntity> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get inboxTasks => (super.noSuchMethod(
        Invocation.getter(#inboxTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get inProgressTasks => (super.noSuchMethod(
        Invocation.getter(#inProgressTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get completedTasks => (super.noSuchMethod(
        Invocation.getter(#completedTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get overdueTasks => (super.noSuchMethod(
        Invocation.getter(#overdueTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get todayTasks => (super.noSuchMethod(
        Invocation.getter(#todayTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get highEnergyTasks => (super.noSuchMethod(
        Invocation.getter(#highEnergyTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> get lowEnergyTasks => (super.noSuchMethod(
        Invocation.getter(#lowEnergyTasks),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i3.TaskEntity> getTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByProject,
          [projectId],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> getTasksByContext(String? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByContext,
          [context],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> getTasksByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #getTasksByTag,
          [tag],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  _i3.TaskEntity? getTaskById(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getTaskById,
        [id],
      )) as _i3.TaskEntity?);

  @override
  _i4.Future<void> loadTasks() => (super.noSuchMethod(
        Invocation.method(
          #loadTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addTask(_i3.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i3.TaskEntity? updatedTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [updatedTask],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markTaskAsCompleted(String? id) => (super.noSuchMethod(
        Invocation.method(
          #markTaskAsCompleted,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markTaskAsInProgress(String? id) => (super.noSuchMethod(
        Invocation.method(
          #markTaskAsInProgress,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addSampleTasks() => (super.noSuchMethod(
        Invocation.method(
          #addSampleTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EnergyProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnergyProvider extends _i1.Mock implements _i6.EnergyProvider {
  MockEnergyProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.EnergyLogEntity> get energyLogs => (super.noSuchMethod(
        Invocation.getter(#energyLogs),
        returnValue: <_i7.EnergyLogEntity>[],
      ) as List<_i7.EnergyLogEntity>);

  @override
  List<_i7.EnergyLogEntity> get todayLogs => (super.noSuchMethod(
        Invocation.getter(#todayLogs),
        returnValue: <_i7.EnergyLogEntity>[],
      ) as List<_i7.EnergyLogEntity>);

  @override
  List<_i7.EnergyLogEntity> get thisWeekLogs => (super.noSuchMethod(
        Invocation.getter(#thisWeekLogs),
        returnValue: <_i7.EnergyLogEntity>[],
      ) as List<_i7.EnergyLogEntity>);

  @override
  List<_i7.EnergyLogEntity> get thisMonthLogs => (super.noSuchMethod(
        Invocation.getter(#thisMonthLogs),
        returnValue: <_i7.EnergyLogEntity>[],
      ) as List<_i7.EnergyLogEntity>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  double getAverageEnergyLevel(List<_i7.EnergyLogEntity>? logs) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAverageEnergyLevel,
          [logs],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double getAverageFocusLevel(List<_i7.EnergyLogEntity>? logs) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAverageFocusLevel,
          [logs],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double getAverageMotivationLevel(List<_i7.EnergyLogEntity>? logs) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAverageMotivationLevel,
          [logs],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i7.EnergyLogEntity? getLogById(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getLogById,
        [id],
      )) as _i7.EnergyLogEntity?);

  @override
  _i4.Future<void> loadEnergyLogs() => (super.noSuchMethod(
        Invocation.method(
          #loadEnergyLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addEnergyLog(_i7.EnergyLogEntity? log) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEnergyLog,
          [log],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateEnergyLog(_i7.EnergyLogEntity? updatedLog) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEnergyLog,
          [updatedLog],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteEnergyLog(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteEnergyLog,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i7.FocoraDayPeriod getCurrentPeriod() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPeriod,
          [],
        ),
        returnValue: _i7.FocoraDayPeriod.morning,
      ) as _i7.FocoraDayPeriod);

  @override
  _i4.Future<void> addSampleEnergyLogs() => (super.noSuchMethod(
        Invocation.method(
          #addSampleEnergyLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
