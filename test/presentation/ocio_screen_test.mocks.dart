// Mocks generated by Mockito 5.4.4 from annotations
// in focora/test/presentation/ocio_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:focora/domain/entities/idea_entity.dart' as _i3;
import 'package:focora/presentation/providers/idea_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IdeaProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdeaProvider extends _i1.Mock implements _i2.IdeaProvider {
  MockIdeaProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.IdeaEntity> get ideas => (super.noSuchMethod(
        Invocation.getter(#ideas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<_i3.IdeaEntity> get recentIdeas => (super.noSuchMethod(
        Invocation.getter(#recentIdeas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<_i3.IdeaEntity> get capturedIdeas => (super.noSuchMethod(
        Invocation.getter(#capturedIdeas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<_i3.IdeaEntity> get inDevelopmentIdeas => (super.noSuchMethod(
        Invocation.getter(#inDevelopmentIdeas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<_i3.IdeaEntity> get implementedIdeas => (super.noSuchMethod(
        Invocation.getter(#implementedIdeas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<_i3.IdeaEntity> get archivedIdeas => (super.noSuchMethod(
        Invocation.getter(#archivedIdeas),
        returnValue: <_i3.IdeaEntity>[],
      ) as List<_i3.IdeaEntity>);

  @override
  List<MapEntry<_i3.IdeaCategory, int>> get commonCategories =>
      (super.noSuchMethod(
        Invocation.getter(#commonCategories),
        returnValue: <MapEntry<_i3.IdeaCategory, int>>[],
      ) as List<MapEntry<_i3.IdeaCategory, int>>);

  @override
  List<MapEntry<String, int>> get commonTags => (super.noSuchMethod(
        Invocation.getter(#commonTags),
        returnValue: <MapEntry<String, int>>[],
      ) as List<MapEntry<String, int>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadIdeas() => (super.noSuchMethod(
        Invocation.method(
          #loadIdeas,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setCurrentIdea(_i3.IdeaEntity? idea) => super.noSuchMethod(
        Invocation.method(
          #setCurrentIdea,
          [idea],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createNewIdea(
    String? title,
    String? description,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createNewIdea,
          [
            title,
            description,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> addIdea(_i3.IdeaEntity? idea) => (super.noSuchMethod(
        Invocation.method(
          #addIdea,
          [idea],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateIdea(_i3.IdeaEntity? idea) => (super.noSuchMethod(
        Invocation.method(
          #updateIdea,
          [idea],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteIdea(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteIdea,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateIdeaStatus(
    String? id,
    _i3.IdeaStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateIdeaStatus,
          [
            id,
            status,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateCurrentTitle(String? title) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentTitle,
          [title],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentDescription(String? description) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentDescription,
          [description],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentCategory(_i3.IdeaCategory? category) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentCategory,
          [category],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentStatus(_i3.IdeaStatus? status) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentStatus,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addTagToCurrent(String? tag) => super.noSuchMethod(
        Invocation.method(
          #addTagToCurrent,
          [tag],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeTagFromCurrent(String? tag) => super.noSuchMethod(
        Invocation.method(
          #removeTagFromCurrent,
          [tag],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentNotes(String? notes) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentNotes,
          [notes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentNextSteps(String? nextSteps) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentNextSteps,
          [nextSteps],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCurrentResources(String? resources) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentResources,
          [resources],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> saveCurrentIdea() => (super.noSuchMethod(
        Invocation.method(
          #saveCurrentIdea,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void discardCurrentIdea() => super.noSuchMethod(
        Invocation.method(
          #discardCurrentIdea,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
