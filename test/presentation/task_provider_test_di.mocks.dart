// Mocks generated by Mockito 5.4.4 from annotations
// in focora/test/presentation/task_provider_test_di.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:focora/data/repositories/task_repository.dart' as _i2;
import 'package:focora/domain/entities/task_entity.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.TaskEntity> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  _i3.TaskEntity? getTaskById(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getTaskById,
        [id],
      )) as _i3.TaskEntity?);

  @override
  List<_i3.TaskEntity> getTasksByStatus(_i3.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> getTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByProject,
          [projectId],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> getTodayTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTodayTasks,
          [],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  List<_i3.TaskEntity> getOverdueTasks() => (super.noSuchMethod(
        Invocation.method(
          #getOverdueTasks,
          [],
        ),
        returnValue: <_i3.TaskEntity>[],
      ) as List<_i3.TaskEntity>);

  @override
  _i4.Future<void> addTask(_i3.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i3.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markTaskAsCompleted(String? id) => (super.noSuchMethod(
        Invocation.method(
          #markTaskAsCompleted,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markTaskAsInProgress(String? id) => (super.noSuchMethod(
        Invocation.method(
          #markTaskAsInProgress,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addSampleTasks() => (super.noSuchMethod(
        Invocation.method(
          #addSampleTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
